diff --git a/Extension/auth_demo.c b/Extension/auth_demo.c
index 27dcf79..667163f
--- a/Extension/auth_demo.c
+++ b/Extension/auth_demo.c
@@ -8,6 +8,7 @@ Functions that initialize the Endpoint Security system extension to receive AUTH
 #include <EndpointSecurity/EndpointSecurity.h>
 #include <dispatch/dispatch.h>
 #include <bsm/libbsm.h>
+#include <signal.h>
 #include <stdio.h>
 #include <os/log.h>
 
@@ -24,38 +25,6 @@ init_dispatch_queue(void)
 	g_event_queue = dispatch_queue_create("event_queue", queue_attrs);
 }
 
-static bool
-is_eicar_file(const es_file_t *file)
-{
-    // The EICAR test file string, as defined by the EICAR standard.
-	static const char* eicar = "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*";
-	static const off_t eicar_length = sizeof(eicar) - 1;
-	static const off_t eicar_max_length = 128;
-
-	bool result = false;
-
-	// EICAR check
-	// First: ensure the length matches defined EICAR requirements.
-	if (file->stat.st_size >= eicar_length && file->stat.st_size <= eicar_max_length) {
-		//Second: Open the file and read the data.
-		int fd = open(file->path.data, O_RDONLY);
-		if (fd >= 0) {
-			uint8_t buf[sizeof(eicar)];
-			ssize_t bytes_read = read(fd, buf, sizeof(buf));
-			if (bytes_read >= eicar_length) {
-				//Third: Test the file contents against the EICAR test string.
-				if (memcmp(buf, eicar, sizeof(buf)) == 0) {
-					result = true;
-				}
-			}
-
-			close(fd);
-		}
-	}
-
-	return result;
-}
-
 static void
 handle_exec(es_client_t *client, const es_message_t *msg)
 {
@@ -63,35 +32,18 @@ handle_exec(es_client_t *client, const es_message_t *msg)
     // However this isn't a very restrictive policy and could inadvertently lead to
     // denying more executions than intended. In general, you should consider using
     // more restrictive policies like inspecting the process's CDHash instead.
-	static const char signing_id_to_block[] = "com.apple.TextEdit";
+	static const char signing_id_to_block[] = "com.apple.Virtualization.VirtualMachine";
 	es_string_token_t *current_signing_id = &msg->event.exec.target->signing_id;
 
 	if ((current_signing_id->length == sizeof(signing_id_to_block) - 1) &&
 			(strncmp(current_signing_id->data, signing_id_to_block, sizeof(signing_id_to_block)) == 0)) {
-		es_respond_auth_result(client, msg, ES_AUTH_RESULT_DENY, true);
+		kill(msg->event.exec.target->session_id, SIGSTOP);
+		es_respond_auth_result(client, msg, ES_AUTH_RESULT_ALLOW, false);
 	} else {
 		es_respond_auth_result(client, msg, ES_AUTH_RESULT_ALLOW, true);
 	}
 }
 
-static void
-handle_open_worker(es_client_t *client, const es_message_t *msg)
-{
-	static const char *ro_prefix = "/usr/local/bin/";
-	static const size_t ro_prefix_length = sizeof(ro_prefix) - 1;
-
-	if (is_eicar_file(msg->event.open.file)) {
-		// Don't allow any operations on EICAR files.
-		es_respond_flags_result(client, msg, 0, true);
-	} else if (strncmp(msg->event.open.file->path.data, ro_prefix, ro_prefix_length) == 0) {
-		// Deny writing to paths that match the readonly prefix.
-		es_respond_flags_result(client, msg, 0xffffffff & ~FWRITE, true);
-	} else {
-		// Allow everything else...
-		es_respond_flags_result(client, msg, 0xffffffff, true);
-	}
-}
-
 static void
 handle_open(es_client_t *client, const es_message_t *msg)
 {
@@ -102,7 +54,7 @@ handle_open(es_client_t *client, const es_message_t *msg)
 	es_retain_message(msg);
 
 	dispatch_async(g_event_queue, ^{
-		handle_open_worker(client, msg);
+		es_respond_flags_result(client, msg, 0xffffffff, true);
 		es_release_message(msg);
 	});
 }
diff --git a/SampleEndpointApp.xcodeproj/project.pbxproj b/SampleEndpointApp.xcodeproj/project.pbxproj
index 96df142..efc5e7c
--- a/SampleEndpointApp.xcodeproj/project.pbxproj
+++ b/SampleEndpointApp.xcodeproj/project.pbxproj
@@ -432,8 +431,8 @@
 			buildSettings = {
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CODE_SIGN_ENTITLEMENTS = SampleEndpointApp/SampleEndpointApp.entitlements;
-				CODE_SIGN_IDENTITY = "Mac Developer";
-				CODE_SIGN_STYLE = Automatic;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Manual;
 				COMBINE_HIDPI_IMAGES = YES;
 				DEVELOPMENT_TEAM = "";
 				ENABLE_HARDENED_RUNTIME = YES;
@@ -454,8 +453,8 @@
 			buildSettings = {
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CODE_SIGN_ENTITLEMENTS = SampleEndpointApp/SampleEndpointApp.entitlements;
-				CODE_SIGN_IDENTITY = "Mac Developer";
-				CODE_SIGN_STYLE = Automatic;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Manual;
 				COMBINE_HIDPI_IMAGES = YES;
 				DEVELOPMENT_TEAM = "";
 				ENABLE_HARDENED_RUNTIME = YES;
@@ -475,8 +474,8 @@
 			baseConfigurationReference = 22968C458EF96BCA72C1DA4B /* SampleCode.xcconfig */;
 			buildSettings = {
 				CODE_SIGN_ENTITLEMENTS = Extension/Extension.entitlements;
-				CODE_SIGN_IDENTITY = "Mac Developer";
-				CODE_SIGN_STYLE = Automatic;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Manual;
 				DEVELOPMENT_TEAM = "";
 				ENABLE_HARDENED_RUNTIME = YES;
 				INFOPLIST_FILE = Extension/Info.plist;
@@ -497,8 +496,8 @@
 			baseConfigurationReference = 22968C458EF96BCA72C1DA4B /* SampleCode.xcconfig */;
 			buildSettings = {
 				CODE_SIGN_ENTITLEMENTS = Extension/Extension.entitlements;
-				CODE_SIGN_IDENTITY = "Mac Developer";
-				CODE_SIGN_STYLE = Automatic;
+				CODE_SIGN_IDENTITY = "-";
+				CODE_SIGN_STYLE = Manual;
 				DEVELOPMENT_TEAM = "";
 				ENABLE_HARDENED_RUNTIME = YES;
 				INFOPLIST_FILE = Extension/Info.plist;
